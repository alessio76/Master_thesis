// Generated by gencpp from file sun_robot_msgs/ClikSetSecondaryObjRequest.msg
// DO NOT EDIT!


#ifndef SUN_ROBOT_MSGS_MESSAGE_CLIKSETSECONDARYOBJREQUEST_H
#define SUN_ROBOT_MSGS_MESSAGE_CLIKSETSECONDARYOBJREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sun_robot_msgs
{
template <class ContainerAllocator>
struct ClikSetSecondaryObjRequest_
{
  typedef ClikSetSecondaryObjRequest_<ContainerAllocator> Type;

  ClikSetSecondaryObjRequest_()
    : second_obj_gain(0.0)
    , second_obj_joint_velocity_topic()
    , desired_joint_configuration()
    , desired_joint_configuration_weights()  {
    }
  ClikSetSecondaryObjRequest_(const ContainerAllocator& _alloc)
    : second_obj_gain(0.0)
    , second_obj_joint_velocity_topic(_alloc)
    , desired_joint_configuration(_alloc)
    , desired_joint_configuration_weights(_alloc)  {
  (void)_alloc;
    }



   typedef double _second_obj_gain_type;
  _second_obj_gain_type second_obj_gain;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _second_obj_joint_velocity_topic_type;
  _second_obj_joint_velocity_topic_type second_obj_joint_velocity_topic;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _desired_joint_configuration_type;
  _desired_joint_configuration_type desired_joint_configuration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _desired_joint_configuration_weights_type;
  _desired_joint_configuration_weights_type desired_joint_configuration_weights;





  typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClikSetSecondaryObjRequest_

typedef ::sun_robot_msgs::ClikSetSecondaryObjRequest_<std::allocator<void> > ClikSetSecondaryObjRequest;

typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetSecondaryObjRequest > ClikSetSecondaryObjRequestPtr;
typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetSecondaryObjRequest const> ClikSetSecondaryObjRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator2> & rhs)
{
  return lhs.second_obj_gain == rhs.second_obj_gain &&
    lhs.second_obj_joint_velocity_topic == rhs.second_obj_joint_velocity_topic &&
    lhs.desired_joint_configuration == rhs.desired_joint_configuration &&
    lhs.desired_joint_configuration_weights == rhs.desired_joint_configuration_weights;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sun_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "108a2849770ecfb08cbb6a4676152ba6";
  }

  static const char* value(const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x108a2849770ecfb0ULL;
  static const uint64_t static_value2 = 0x8cbb6a4676152ba6ULL;
};

template<class ContainerAllocator>
struct DataType< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sun_robot_msgs/ClikSetSecondaryObjRequest";
  }

  static const char* value(const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 second_obj_gain #Gain of the second obj\n"
"\n"
"##\n"
"##The following options are mutually exclusive, you can't set both\n"
"##\n"
"\n"
"# Mode: Objective from topic\n"
"# desired joint velocity for the second objective\n"
"# the velocity will be projected in the jacobian kernel\n"
"string second_obj_joint_velocity_topic\n"
"\n"
"# Mode: Objective is: reach the desired joint configuration\n"
"float64[] desired_joint_configuration\n"
"float64[] desired_joint_configuration_weights\n"
"\n"
;
  }

  static const char* value(const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.second_obj_gain);
      stream.next(m.second_obj_joint_velocity_topic);
      stream.next(m.desired_joint_configuration);
      stream.next(m.desired_joint_configuration_weights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClikSetSecondaryObjRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sun_robot_msgs::ClikSetSecondaryObjRequest_<ContainerAllocator>& v)
  {
    s << indent << "second_obj_gain: ";
    Printer<double>::stream(s, indent + "  ", v.second_obj_gain);
    s << indent << "second_obj_joint_velocity_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.second_obj_joint_velocity_topic);
    s << indent << "desired_joint_configuration[]" << std::endl;
    for (size_t i = 0; i < v.desired_joint_configuration.size(); ++i)
    {
      s << indent << "  desired_joint_configuration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_joint_configuration[i]);
    }
    s << indent << "desired_joint_configuration_weights[]" << std::endl;
    for (size_t i = 0; i < v.desired_joint_configuration_weights.size(); ++i)
    {
      s << indent << "  desired_joint_configuration_weights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_joint_configuration_weights[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUN_ROBOT_MSGS_MESSAGE_CLIKSETSECONDARYOBJREQUEST_H
