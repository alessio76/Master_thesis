// Generated by gencpp from file sun_robot_msgs/CartesianTrajectory.msg
// DO NOT EDIT!


#ifndef SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORY_H
#define SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sun_robot_msgs/CartesianTrajectoryPoint.h>

namespace sun_robot_msgs
{
template <class ContainerAllocator>
struct CartesianTrajectory_
{
  typedef CartesianTrajectory_<ContainerAllocator> Type;

  CartesianTrajectory_()
    : header()
    , points()  {
    }
  CartesianTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::sun_robot_msgs::CartesianTrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sun_robot_msgs::CartesianTrajectoryPoint_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianTrajectory_

typedef ::sun_robot_msgs::CartesianTrajectory_<std::allocator<void> > CartesianTrajectory;

typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectory > CartesianTrajectoryPtr;
typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectory const> CartesianTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sun_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50c8edd4c5f649116e4f0e750823a73e";
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50c8edd4c5f64911ULL;
  static const uint64_t static_value2 = 0x6e4f0e750823a73eULL;
};

template<class ContainerAllocator>
struct DataType< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sun_robot_msgs/CartesianTrajectory";
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"sun_robot_msgs/CartesianTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sun_robot_msgs/CartesianTrajectoryPoint\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist velocity\n"
"geometry_msgs/Twist acceleration\n"
"duration time_from_start\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sun_robot_msgs::CartesianTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sun_robot_msgs::CartesianTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORY_H
