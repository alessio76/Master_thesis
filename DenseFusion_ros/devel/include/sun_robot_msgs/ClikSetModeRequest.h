// Generated by gencpp from file sun_robot_msgs/ClikSetModeRequest.msg
// DO NOT EDIT!


#ifndef SUN_ROBOT_MSGS_MESSAGE_CLIKSETMODEREQUEST_H
#define SUN_ROBOT_MSGS_MESSAGE_CLIKSETMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sun_robot_msgs
{
template <class ContainerAllocator>
struct ClikSetModeRequest_
{
  typedef ClikSetModeRequest_<ContainerAllocator> Type;

  ClikSetModeRequest_()
    : mode(0)  {
    }
  ClikSetModeRequest_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_STOP)
  #undef MODE_STOP
#endif
#if defined(_WIN32) && defined(MODE_POSITION)
  #undef MODE_POSITION
#endif
#if defined(_WIN32) && defined(MODE_VELOCITY)
  #undef MODE_VELOCITY
#endif
#if defined(_WIN32) && defined(MODE_VELOCITY_EE)
  #undef MODE_VELOCITY_EE
#endif

  enum {
    MODE_STOP = 0u,
    MODE_POSITION = 1u,
    MODE_VELOCITY = 2u,
    MODE_VELOCITY_EE = 3u,
  };


  typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClikSetModeRequest_

typedef ::sun_robot_msgs::ClikSetModeRequest_<std::allocator<void> > ClikSetModeRequest;

typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetModeRequest > ClikSetModeRequestPtr;
typedef boost::shared_ptr< ::sun_robot_msgs::ClikSetModeRequest const> ClikSetModeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sun_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c4fa3da8640f834fab81635a613c616";
  }

  static const char* value(const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c4fa3da8640f834ULL;
  static const uint64_t static_value2 = 0xfab81635a613c616ULL;
};

template<class ContainerAllocator>
struct DataType< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sun_robot_msgs/ClikSetModeRequest";
  }

  static const char* value(const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_STOP=0\n"
"uint8 MODE_POSITION=1\n"
"uint8 MODE_VELOCITY=2\n"
"uint8 MODE_VELOCITY_EE=3\n"
"uint8 mode\n"
;
  }

  static const char* value(const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClikSetModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sun_robot_msgs::ClikSetModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUN_ROBOT_MSGS_MESSAGE_CLIKSETMODEREQUEST_H
