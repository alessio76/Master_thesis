// Generated by gencpp from file sun_robot_msgs/CartesianTrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORYFEEDBACK_H
#define SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sun_robot_msgs
{
template <class ContainerAllocator>
struct CartesianTrajectoryFeedback_
{
  typedef CartesianTrajectoryFeedback_<ContainerAllocator> Type;

  CartesianTrajectoryFeedback_()
    : time_left()  {
    }
  CartesianTrajectoryFeedback_(const ContainerAllocator& _alloc)
    : time_left()  {
  (void)_alloc;
    }



   typedef ros::Duration _time_left_type;
  _time_left_type time_left;





  typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianTrajectoryFeedback_

typedef ::sun_robot_msgs::CartesianTrajectoryFeedback_<std::allocator<void> > CartesianTrajectoryFeedback;

typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectoryFeedback > CartesianTrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::sun_robot_msgs::CartesianTrajectoryFeedback const> CartesianTrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.time_left == rhs.time_left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sun_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df04f3fae3898e2a9dc2f391cd8efd73";
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf04f3fae3898e2aULL;
  static const uint64_t static_value2 = 0x9dc2f391cd8efd73ULL;
};

template<class ContainerAllocator>
struct DataType< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sun_robot_msgs/CartesianTrajectoryFeedback";
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"duration time_left\n"
;
  }

  static const char* value(const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianTrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sun_robot_msgs::CartesianTrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "time_left: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUN_ROBOT_MSGS_MESSAGE_CARTESIANTRAJECTORYFEEDBACK_H
