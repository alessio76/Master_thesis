// Generated by gencpp from file sun_robot_msgs/ClikGetStateResponse.msg
// DO NOT EDIT!


#ifndef SUN_ROBOT_MSGS_MESSAGE_CLIKGETSTATERESPONSE_H
#define SUN_ROBOT_MSGS_MESSAGE_CLIKGETSTATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <geometry_msgs/PoseStamped.h>

namespace sun_robot_msgs
{
template <class ContainerAllocator>
struct ClikGetStateResponse_
{
  typedef ClikGetStateResponse_<ContainerAllocator> Type;

  ClikGetStateResponse_()
    : mode(0)
    , robot_joints()
    , dh_joints()
    , ee_pose()  {
    }
  ClikGetStateResponse_(const ContainerAllocator& _alloc)
    : mode(0)
    , robot_joints(_alloc)
    , dh_joints(_alloc)
    , ee_pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _robot_joints_type;
  _robot_joints_type robot_joints;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _dh_joints_type;
  _dh_joints_type dh_joints;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _ee_pose_type;
  _ee_pose_type ee_pose;





  typedef boost::shared_ptr< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClikGetStateResponse_

typedef ::sun_robot_msgs::ClikGetStateResponse_<std::allocator<void> > ClikGetStateResponse;

typedef boost::shared_ptr< ::sun_robot_msgs::ClikGetStateResponse > ClikGetStateResponsePtr;
typedef boost::shared_ptr< ::sun_robot_msgs::ClikGetStateResponse const> ClikGetStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.robot_joints == rhs.robot_joints &&
    lhs.dh_joints == rhs.dh_joints &&
    lhs.ee_pose == rhs.ee_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator1> & lhs, const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sun_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d91a0f07be437a20a6af62e12e2fad5a";
  }

  static const char* value(const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd91a0f07be437a20ULL;
  static const uint64_t static_value2 = 0xa6af62e12e2fad5aULL;
};

template<class ContainerAllocator>
struct DataType< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sun_robot_msgs/ClikGetStateResponse";
  }

  static const char* value(const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 mode\n"
"sensor_msgs/JointState robot_joints\n"
"sensor_msgs/JointState dh_joints\n"
"geometry_msgs/PoseStamped ee_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.robot_joints);
      stream.next(m.dh_joints);
      stream.next(m.ee_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClikGetStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sun_robot_msgs::ClikGetStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "robot_joints: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_joints);
    s << indent << "dh_joints: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.dh_joints);
    s << indent << "ee_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.ee_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUN_ROBOT_MSGS_MESSAGE_CLIKGETSTATERESPONSE_H
