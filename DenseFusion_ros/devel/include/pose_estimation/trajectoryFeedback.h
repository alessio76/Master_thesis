// Generated by gencpp from file pose_estimation/trajectoryFeedback.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATION_MESSAGE_TRAJECTORYFEEDBACK_H
#define POSE_ESTIMATION_MESSAGE_TRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pose_estimation
{
template <class ContainerAllocator>
struct trajectoryFeedback_
{
  typedef trajectoryFeedback_<ContainerAllocator> Type;

  trajectoryFeedback_()
    : time_to_complete(0.0)  {
    }
  trajectoryFeedback_(const ContainerAllocator& _alloc)
    : time_to_complete(0.0)  {
  (void)_alloc;
    }



   typedef double _time_to_complete_type;
  _time_to_complete_type time_to_complete;





  typedef boost::shared_ptr< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct trajectoryFeedback_

typedef ::pose_estimation::trajectoryFeedback_<std::allocator<void> > trajectoryFeedback;

typedef boost::shared_ptr< ::pose_estimation::trajectoryFeedback > trajectoryFeedbackPtr;
typedef boost::shared_ptr< ::pose_estimation::trajectoryFeedback const> trajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimation::trajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_estimation::trajectoryFeedback_<ContainerAllocator1> & lhs, const ::pose_estimation::trajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.time_to_complete == rhs.time_to_complete;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_estimation::trajectoryFeedback_<ContainerAllocator1> & lhs, const ::pose_estimation::trajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_estimation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cea587cb1d0ba427b2641cb033f1ff1";
  }

  static const char* value(const ::pose_estimation::trajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cea587cb1d0ba42ULL;
  static const uint64_t static_value2 = 0x7b2641cb033f1ff1ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimation/trajectoryFeedback";
  }

  static const char* value(const ::pose_estimation::trajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float64 time_to_complete\n"
"\n"
;
  }

  static const char* value(const ::pose_estimation::trajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_to_complete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimation::trajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimation::trajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "time_to_complete: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_complete);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATION_MESSAGE_TRAJECTORYFEEDBACK_H
