// Generated by gencpp from file pose_estimation/plan_serviceRequest.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATION_MESSAGE_PLAN_SERVICEREQUEST_H
#define POSE_ESTIMATION_MESSAGE_PLAN_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace pose_estimation
{
template <class ContainerAllocator>
struct plan_serviceRequest_
{
  typedef plan_serviceRequest_<ContainerAllocator> Type;

  plan_serviceRequest_()
    : goal_transform()
    , planning_group()  {
    }
  plan_serviceRequest_(const ContainerAllocator& _alloc)
    : goal_transform(_alloc)
    , planning_group(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _goal_transform_type;
  _goal_transform_type goal_transform;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _planning_group_type;
  _planning_group_type planning_group;





  typedef boost::shared_ptr< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct plan_serviceRequest_

typedef ::pose_estimation::plan_serviceRequest_<std::allocator<void> > plan_serviceRequest;

typedef boost::shared_ptr< ::pose_estimation::plan_serviceRequest > plan_serviceRequestPtr;
typedef boost::shared_ptr< ::pose_estimation::plan_serviceRequest const> plan_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimation::plan_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_estimation::plan_serviceRequest_<ContainerAllocator1> & lhs, const ::pose_estimation::plan_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_transform == rhs.goal_transform &&
    lhs.planning_group == rhs.planning_group;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_estimation::plan_serviceRequest_<ContainerAllocator1> & lhs, const ::pose_estimation::plan_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_estimation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "839795473112c3f1eb0e4623ea240ab6";
  }

  static const char* value(const ::pose_estimation::plan_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x839795473112c3f1ULL;
  static const uint64_t static_value2 = 0xeb0e4623ea240ab6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimation/plan_serviceRequest";
  }

  static const char* value(const ::pose_estimation::plan_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform goal_transform\n"
"string planning_group\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pose_estimation::plan_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_transform);
      stream.next(m.planning_group);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plan_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimation::plan_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimation::plan_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_transform);
    s << indent << "planning_group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.planning_group);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATION_MESSAGE_PLAN_SERVICEREQUEST_H
