;; Auto-generated. Do not edit!


(when (boundp 'sun_robot_msgs::JointTrajectoryGoal)
  (if (not (find-package "SUN_ROBOT_MSGS"))
    (make-package "SUN_ROBOT_MSGS"))
  (shadow 'JointTrajectoryGoal (find-package "SUN_ROBOT_MSGS")))
(unless (find-package "SUN_ROBOT_MSGS::JOINTTRAJECTORYGOAL")
  (make-package "SUN_ROBOT_MSGS::JOINTTRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude JointTrajectoryGoal.msg.html
(if (not (find-package "TRAJECTORY_MSGS"))
  (ros::roseus-add-msgs "trajectory_msgs"))


(defclass sun_robot_msgs::JointTrajectoryGoal
  :super ros::object
  :slots (_trajectory _sampling_freq _use_exponential_junction _initial_joints _junction_time_constant ))

(defmethod sun_robot_msgs::JointTrajectoryGoal
  (:init
   (&key
    ((:trajectory __trajectory) (instance trajectory_msgs::JointTrajectory :init))
    ((:sampling_freq __sampling_freq) 0.0)
    ((:use_exponential_junction __use_exponential_junction) nil)
    ((:initial_joints __initial_joints) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:junction_time_constant __junction_time_constant) 0.0)
    )
   (send-super :init)
   (setq _trajectory __trajectory)
   (setq _sampling_freq (float __sampling_freq))
   (setq _use_exponential_junction __use_exponential_junction)
   (setq _initial_joints __initial_joints)
   (setq _junction_time_constant (float __junction_time_constant))
   self)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:sampling_freq
   (&optional __sampling_freq)
   (if __sampling_freq (setq _sampling_freq __sampling_freq)) _sampling_freq)
  (:use_exponential_junction
   (&optional (__use_exponential_junction :null))
   (if (not (eq __use_exponential_junction :null)) (setq _use_exponential_junction __use_exponential_junction)) _use_exponential_junction)
  (:initial_joints
   (&optional __initial_joints)
   (if __initial_joints (setq _initial_joints __initial_joints)) _initial_joints)
  (:junction_time_constant
   (&optional __junction_time_constant)
   (if __junction_time_constant (setq _junction_time_constant __junction_time_constant)) _junction_time_constant)
  (:serialization-length
   ()
   (+
    ;; trajectory_msgs/JointTrajectory _trajectory
    (send _trajectory :serialization-length)
    ;; float64 _sampling_freq
    8
    ;; bool _use_exponential_junction
    1
    ;; float64[] _initial_joints
    (* 8    (length _initial_joints)) 4
    ;; float64 _junction_time_constant
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; trajectory_msgs/JointTrajectory _trajectory
       (send _trajectory :serialize s)
     ;; float64 _sampling_freq
       (sys::poke _sampling_freq (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _use_exponential_junction
       (if _use_exponential_junction (write-byte -1 s) (write-byte 0 s))
     ;; float64[] _initial_joints
     (write-long (length _initial_joints) s)
     (dotimes (i (length _initial_joints))
       (sys::poke (elt _initial_joints i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64 _junction_time_constant
       (sys::poke _junction_time_constant (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; trajectory_msgs/JointTrajectory _trajectory
     (send _trajectory :deserialize buf ptr-) (incf ptr- (send _trajectory :serialization-length))
   ;; float64 _sampling_freq
     (setq _sampling_freq (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _use_exponential_junction
     (setq _use_exponential_junction (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; float64[] _initial_joints
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _initial_joints (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _initial_joints i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64 _junction_time_constant
     (setq _junction_time_constant (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get sun_robot_msgs::JointTrajectoryGoal :md5sum-) "1f432036db786cbab1e03854cd9964ae")
(setf (get sun_robot_msgs::JointTrajectoryGoal :datatype-) "sun_robot_msgs/JointTrajectoryGoal")
(setf (get sun_robot_msgs::JointTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
trajectory_msgs/JointTrajectory trajectory
float64 sampling_freq

# if exponential_junction the trajectory will be considered a nominal one q_N(t)
# the actual trajectory q(t) will be
# q(t) = (initial_joints - q_N(t))*exp(-(t-t0)/junction_time_constant) + q_N(t)
# NOTE: initial_joints must be ordered as the joints in the trajectory
bool use_exponential_junction
float64[] initial_joints
float64 junction_time_constant


================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

")



(provide :sun_robot_msgs/JointTrajectoryGoal "1f432036db786cbab1e03854cd9964ae")


