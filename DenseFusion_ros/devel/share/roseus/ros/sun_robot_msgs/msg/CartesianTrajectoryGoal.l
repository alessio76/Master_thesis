;; Auto-generated. Do not edit!


(when (boundp 'sun_robot_msgs::CartesianTrajectoryGoal)
  (if (not (find-package "SUN_ROBOT_MSGS"))
    (make-package "SUN_ROBOT_MSGS"))
  (shadow 'CartesianTrajectoryGoal (find-package "SUN_ROBOT_MSGS")))
(unless (find-package "SUN_ROBOT_MSGS::CARTESIANTRAJECTORYGOAL")
  (make-package "SUN_ROBOT_MSGS::CARTESIANTRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude CartesianTrajectoryGoal.msg.html


(defclass sun_robot_msgs::CartesianTrajectoryGoal
  :super ros::object
  :slots (_trajectory _sampling_freq _use_trapez ))

(defmethod sun_robot_msgs::CartesianTrajectoryGoal
  (:init
   (&key
    ((:trajectory __trajectory) (instance sun_robot_msgs::CartesianTrajectory :init))
    ((:sampling_freq __sampling_freq) 0.0)
    ((:use_trapez __use_trapez) nil)
    )
   (send-super :init)
   (setq _trajectory __trajectory)
   (setq _sampling_freq (float __sampling_freq))
   (setq _use_trapez __use_trapez)
   self)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:sampling_freq
   (&optional __sampling_freq)
   (if __sampling_freq (setq _sampling_freq __sampling_freq)) _sampling_freq)
  (:use_trapez
   (&optional (__use_trapez :null))
   (if (not (eq __use_trapez :null)) (setq _use_trapez __use_trapez)) _use_trapez)
  (:serialization-length
   ()
   (+
    ;; sun_robot_msgs/CartesianTrajectory _trajectory
    (send _trajectory :serialization-length)
    ;; float64 _sampling_freq
    8
    ;; bool _use_trapez
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sun_robot_msgs/CartesianTrajectory _trajectory
       (send _trajectory :serialize s)
     ;; float64 _sampling_freq
       (sys::poke _sampling_freq (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _use_trapez
       (if _use_trapez (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sun_robot_msgs/CartesianTrajectory _trajectory
     (send _trajectory :deserialize buf ptr-) (incf ptr- (send _trajectory :serialization-length))
   ;; float64 _sampling_freq
     (setq _sampling_freq (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _use_trapez
     (setq _use_trapez (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get sun_robot_msgs::CartesianTrajectoryGoal :md5sum-) "e7fd141f55570565cc279335a6a6197c")
(setf (get sun_robot_msgs::CartesianTrajectoryGoal :datatype-) "sun_robot_msgs/CartesianTrajectoryGoal")
(setf (get sun_robot_msgs::CartesianTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
sun_robot_msgs/CartesianTrajectory trajectory
float64 sampling_freq
bool use_trapez


================================================================================
MSG: sun_robot_msgs/CartesianTrajectory
std_msgs/Header header
sun_robot_msgs/CartesianTrajectoryPoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sun_robot_msgs/CartesianTrajectoryPoint
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Twist acceleration
duration time_from_start
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :sun_robot_msgs/CartesianTrajectoryGoal "e7fd141f55570565cc279335a6a6197c")


